// normalize-support-for()
//
// Determines if the project has declared a minimum supported version number for
// the specified browser.
//
// If configured, this is a wrapper function that uses Compass'
// support-legacy-browser().
// @see http://compass-style.org/reference/compass/support/#function-support-legacy-browser
//
@function normalize-support-for($browser, $version) {
  // Ensure $version is an integer (or null).
  @if not (type-of($version) == "null" or type-of($version) == "number" and round($version) == $version) {
    @error "The $version parameter of normalize-support-for() must be an integer; #{inspect($version)} given.";
  }

  @if function-exists('support-legacy-browser') {
    // We want $version to be an integer, but Compass' function requires a string.
    @return support-legacy-browser($browser, inspect($version));
  }

  // Check against declared minimums.
  $min-version: if(map-has-key($normalize-support-for, $browser), map-get($normalize-support-for, $browser), null);

  // Ensure $min-version is an integer (or null).
  @if type-of($min-version) != "null" and type-of($min-version) != "number" {
    @error "$normalize-support-for: (#{$browser}: #{$min-version}) must be set to an integer (or null); #{$min-version} is a #{type-of($min-version)}.";
  }
  @elseif type-of($min-version) == "number" and round($min-version) != $min-version {
    @error "$normalize-support-for: (#{$browser}: #{$min-version}) must be set to an integer (or null); #{$min-version} is not an integer.";
  }

  // Negative $min-version means "X most recent versions".
  @if type-of($min-version) == "number" and $min-version < 0 {
    @if not map-has-key($normalize-current-browser-version, $browser) {
      @error "$normalize-current-browser-version: (#{$browser}: null) must be set to an integer.";
    }
    $min-version: map-get($normalize-current-browser-version, $browser) + $min-version + 1;
  }

  @return ($min-version and ($version >= $min-version));
}
